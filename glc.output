Grammar

    0 $accept: orden $end

    1 orden: secuencia '\n'
    2      | '\n'

    3 secuencia: cond ';' secuencia
    4          | cond

    5 cond: redir AMPAMP cond
    6     | redir PIPPIP cond
    7     | redir

    8 redir: pipe '>' archivo
    9      | pipe '<' archivo
   10      | pipe MAYMAY archivo
   11      | pipe

   12 pipe: programa '|' pipe
   13     | programa

   14 programa: prog args
   15         | EXIT

   16 prog: STRING

   17 args: args arg
   18     | /* empty */

   19 arg: STRING

   20 archivo: STRING


Terminals, with rules where they appear

$end (0) 0
'\n' (10) 1 2
';' (59) 3
'<' (60) 9
'>' (62) 8
'|' (124) 12
error (256)
MAYMAY (258) 10
PIPPIP (259) 6
AMPAMP (260) 5
STRING (261) 16 19 20
EXIT (262) 15


Nonterminals, with rules where they appear

$accept (13)
    on left: 0
orden (14)
    on left: 1 2, on right: 0
secuencia (15)
    on left: 3 4, on right: 1 3
cond (16)
    on left: 5 6 7, on right: 3 4 5 6
redir (17)
    on left: 8 9 10 11, on right: 5 6 7
pipe (18)
    on left: 12 13, on right: 8 9 10 11 12
programa (19)
    on left: 14 15, on right: 12 13
prog (20)
    on left: 16, on right: 14
args (21)
    on left: 17 18, on right: 14 17
arg (22)
    on left: 19, on right: 17
archivo (23)
    on left: 20, on right: 8 9 10


state 0

    0 $accept: . orden $end

    STRING  shift, and go to state 1
    EXIT    shift, and go to state 2
    '\n'    shift, and go to state 3

    orden      go to state 4
    secuencia  go to state 5
    cond       go to state 6
    redir      go to state 7
    pipe       go to state 8
    programa   go to state 9
    prog       go to state 10


state 1

   16 prog: STRING .

    $default  reduce using rule 16 (prog)


state 2

   15 programa: EXIT .

    $default  reduce using rule 15 (programa)


state 3

    2 orden: '\n' .

    $default  reduce using rule 2 (orden)


state 4

    0 $accept: orden . $end

    $end  shift, and go to state 11


state 5

    1 orden: secuencia . '\n'

    '\n'  shift, and go to state 12


state 6

    3 secuencia: cond . ';' secuencia
    4          | cond .

    ';'  shift, and go to state 13

    $default  reduce using rule 4 (secuencia)


state 7

    5 cond: redir . AMPAMP cond
    6     | redir . PIPPIP cond
    7     | redir .

    PIPPIP  shift, and go to state 14
    AMPAMP  shift, and go to state 15

    $default  reduce using rule 7 (cond)


state 8

    8 redir: pipe . '>' archivo
    9      | pipe . '<' archivo
   10      | pipe . MAYMAY archivo
   11      | pipe .

    MAYMAY  shift, and go to state 16
    '>'     shift, and go to state 17
    '<'     shift, and go to state 18

    $default  reduce using rule 11 (redir)


state 9

   12 pipe: programa . '|' pipe
   13     | programa .

    '|'  shift, and go to state 19

    $default  reduce using rule 13 (pipe)


state 10

   14 programa: prog . args

    $default  reduce using rule 18 (args)

    args  go to state 20


state 11

    0 $accept: orden $end .

    $default  accept


state 12

    1 orden: secuencia '\n' .

    $default  reduce using rule 1 (orden)


state 13

    3 secuencia: cond ';' . secuencia

    STRING  shift, and go to state 1
    EXIT    shift, and go to state 2

    secuencia  go to state 21
    cond       go to state 6
    redir      go to state 7
    pipe       go to state 8
    programa   go to state 9
    prog       go to state 10


state 14

    6 cond: redir PIPPIP . cond

    STRING  shift, and go to state 1
    EXIT    shift, and go to state 2

    cond      go to state 22
    redir     go to state 7
    pipe      go to state 8
    programa  go to state 9
    prog      go to state 10


state 15

    5 cond: redir AMPAMP . cond

    STRING  shift, and go to state 1
    EXIT    shift, and go to state 2

    cond      go to state 23
    redir     go to state 7
    pipe      go to state 8
    programa  go to state 9
    prog      go to state 10


state 16

   10 redir: pipe MAYMAY . archivo

    STRING  shift, and go to state 24

    archivo  go to state 25


state 17

    8 redir: pipe '>' . archivo

    STRING  shift, and go to state 24

    archivo  go to state 26


state 18

    9 redir: pipe '<' . archivo

    STRING  shift, and go to state 24

    archivo  go to state 27


state 19

   12 pipe: programa '|' . pipe

    STRING  shift, and go to state 1
    EXIT    shift, and go to state 2

    pipe      go to state 28
    programa  go to state 9
    prog      go to state 10


state 20

   14 programa: prog args .
   17 args: args . arg

    STRING  shift, and go to state 29

    $default  reduce using rule 14 (programa)

    arg  go to state 30


state 21

    3 secuencia: cond ';' secuencia .

    $default  reduce using rule 3 (secuencia)


state 22

    6 cond: redir PIPPIP cond .

    $default  reduce using rule 6 (cond)


state 23

    5 cond: redir AMPAMP cond .

    $default  reduce using rule 5 (cond)


state 24

   20 archivo: STRING .

    $default  reduce using rule 20 (archivo)


state 25

   10 redir: pipe MAYMAY archivo .

    $default  reduce using rule 10 (redir)


state 26

    8 redir: pipe '>' archivo .

    $default  reduce using rule 8 (redir)


state 27

    9 redir: pipe '<' archivo .

    $default  reduce using rule 9 (redir)


state 28

   12 pipe: programa '|' pipe .

    $default  reduce using rule 12 (pipe)


state 29

   19 arg: STRING .

    $default  reduce using rule 19 (arg)


state 30

   17 args: args arg .

    $default  reduce using rule 17 (args)
